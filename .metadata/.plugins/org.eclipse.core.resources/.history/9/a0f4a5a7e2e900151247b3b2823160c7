package com.zero.controller.ccas;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.zero.common.Global;
import com.zero.entity.Adminuser;
import com.zero.entity.CreditTemplateContext;
import com.zero.entity.Creditanalysistemplatecontext;
import com.zero.entity.Singleusercreditinformation;
import com.zero.entity.Templatedata;
import com.zero.entity.CreditTemplateAllInfo;
import com.zero.entity.Templateuser;
import com.zero.service.SimulationDataService;
import com.zero.service.SingInformationService;
import com.zero.service.TemplatService;
import com.zero.service.UserService;

@RequestMapping("/ccas/index/dataCollect")
@Controller
public class CCASDataCollectController {
	@Autowired
	SimulationDataService sds;
	@Autowired
	TemplatService ts;
	@Autowired
	UserService us;
	@Autowired
	SingInformationService sis;
	@Autowired  
    private HttpServletRequest request;
	
	//文件上传
	@RequestMapping("/dataFileInput")
	public String dataFileInput(){
		return "client-credit-analyse-system/data-collect/dataFileInput";
	}
	
	//文件上传
	//只是完成了文件上传，还没有加入数据库记录
	//数据表 userId filepath 
	@RequestMapping(value="/dataFileInput",method=RequestMethod.POST)
	public String dataFileInput(@RequestParam("file") CommonsMultipartFile file) throws IOException {
       System.out.println("上传文件 fileName："+file.getOriginalFilename());
       String path=request.getSession().getServletContext().getRealPath("/") + "WEB-INF/tmp/upData/"  
               + file.getOriginalFilename();
       File newFile=new File(path);
       //通过CommonsMultipartFile的方法直接写文件
       file.transferTo(newFile);
       return "client-credit-analyse-system/data-collect/dataFileInput";
	}
	
	@RequestMapping("/dataInput")
	public String dataInput(){
		return "client-credit-analyse-system/data-collect/dataInput";
	}
	
	@RequestMapping("/filedownload")  
	public ResponseEntity<byte[]> download() throws IOException {  
	    HttpHeaders headers = new HttpHeaders();  
	    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);  
	    headers.setContentDispositionFormData("attachment", "model.CVS");  
	    String path=request.getSession().getServletContext().getRealPath("/") + "WEB-INF/resources/file/model.CSV";
	    return new ResponseEntity<byte[]>(FileUtils.readFileToByteArray(new File(path)),  
	                                      headers, HttpStatus.CREATED);  
	}  
	
	@RequestMapping("/operationLog")
	public String operationLog(){
		return "client-credit-analyse-system/data-collect/DataCollectMainFrame";
	}
   
    //加载生成模拟数据或保存数据模板的界面
    @RequestMapping(value="/generateData",method=RequestMethod.GET)
	public String generateData(Model model){
    	model.addAttribute("OperateStatus", "");
		return "client-credit-analyse-system/data-collect/generateData";
	}
    
    //生成模拟数据 
    @RequestMapping(value="/generateData",method=RequestMethod.POST)
    public String generateData(Model model,Creditanalysistemplatecontext catc) 
    {
		SimpleDateFormat df1 = new SimpleDateFormat("yyyyMMddHHmmss");//设置日期格式
		Date date=new Date();
		CreditTemplateAllInfo  cta=new CreditTemplateAllInfo();
		cta.setId(df1.format(date));
		cta.setTime(df1.format(date));
		CreditTemplateContext cdc=new CreditTemplateContext();
		cta.setCreditTemplateContext(cdc);
		Adminuser au=new Adminuser();
		
		au.setAdminName(request.getSession().getAttribute(Global.USERNAME)+"");
		cta.setUseUser(au);
		cta.getCreditTemplateContext().setMaxAge(catc.getMaxAge());
		cta.getCreditTemplateContext().setMaxMounthlyIncome(catc.getMaxMounthlyIncome());
		cta.getCreditTemplateContext().setMaxWorkYears(String.valueOf(10));
		cta.getCreditTemplateContext().setMinAge(catc.getMinAge());
		cta.getCreditTemplateContext().setMinMonthlyIncome(catc.getMinMonthlyIncome());
		cta.getCreditTemplateContext().setMinWorkYears(String.valueOf(2));
		cta.setGenerateNums(catc.getGenerateRecordNum());

		try
		{
			String[][] str=sds.generateCreditSimulationData(cta);
			System.out.println("str:"+str.length);
			if(str.length>0)
			{
				model.addAttribute("OperateStatus", "模拟数据生成成功！");
			}
			else
			{
				model.addAttribute("OperateStatus", "模拟数据生成失败！");
			}
		}
		catch(Exception ex)
		{
			model.addAttribute("OperateStatus", "模拟数据生成失败！"); 
		}
    	
		return "client-credit-analyse-system/data-collect/generateData";
    }
    
	//保存为数据模板
    @RequestMapping(value="/saveAsTemplate",method=RequestMethod.POST)
    public String SaveAsTemplate(Model model,Creditanalysistemplatecontext catc) 
    {
    	try
    	{
    		Templatedata ta=new Templatedata();				
    		SimpleDateFormat ms=new SimpleDateFormat("HH:mm:ss");
    		Date n=new Date();
    		ta.setTempDate(n);
    		int id=us.findAdminID(request.getSession().getAttribute(Global.USERNAME)+"");
    		ta.setAdminId(id);
    		ta.setTempTime(new java.sql.Time(new java.util.Date().getTime()));
    		System.out.println("Admin="+ta.getAdminId()+" Date="+ta.getTempDate()+" Time= "+ta.getTempTime());
    		ts.insertTemplateData(ta, catc);
    		model.addAttribute("OperateStatus", "模板保存成功！");
    	}
    	catch(Exception ex)
    	{
    		model.addAttribute("OperateStatus", "模板保存失败！");
    	}
    	return "client-credit-analyse-system/data-collect/generateData";
    }

    //数据录入 dataInput.jsp
    @RequestMapping(value="/dataInput",method=RequestMethod.GET)
    public String DataInput(Model model)
    {
    	model.addAttribute("OperateStatus", "");
    	return "client-credit-analyse-system/data-collect/dataInput";
    }
    
    //录入数据保存
    @RequestMapping(value="/dataInput",method=RequestMethod.POST)
    public String DataInput(Model model,Singleusercreditinformation sci)
    {
    	System.out.println("age:"+sci.getAge()+" AdministrativerPunishment:"+sci.getAdministrativerPunishment()+" CivilJudgmentRecord:"+sci.getCivilJudgmentRecord()+" CreditNum:"+sci.getCreditNum()+" ElectricityArrears:"+sci.getElectricityArrears()+" Enforcement:"+sci.getEnforcement()+" GenerateRecordNum:"+sci.getGenerateRecordNum()+
				" HouseLoan:"+sci.getHouseLoan()+" LoansNum:"+sci.getLoansNum()+" MonthlyIncome:"+sci.getMonthlyIncome()+" OwingTaxes:"+sci.getOwingTaxes()+" SelectOwingTaxes:"+sci.getSelectOwingTaxes());
    	try{
    		sis.addSingleusercreditinformation(sci);
    		model.addAttribute("OperateStatus", "保存成功！");
    	}
    	catch(Exception ex)
    	{
    		model.addAttribute("OperateStatus", "保存失败！");
    	}
    	return "client-credit-analyse-system/data-collect/dataInput";
    }
    
    //查询所有的模板
    @RequestMapping(value="/TempletCreateRecordDetail",method=RequestMethod.GET)
    public ModelAndView  CheckAllTemplates()
    {
    	List<Templatedata> tds=new ArrayList<Templatedata>();
    	tds.clear();
    	try{
    		tds=ts.checkTotalCreditTemplate();
    		//model.addAttribute("OperateStatus", "全部模板显示成功！");
    	}
    	catch(Exception ex)
    	{
    		//model.addAttribute("OperateStatus", "全部模板显示失败！");
    	}
    	return new  ModelAndView("client-credit-analyse-system/data-collect/TempletCreateRecordDetail", "Templatedatas", tds);
    }
    
    //根据id删除模板
    @RequestMapping(value="/deleteTemplate/{id}",method=RequestMethod.GET)
    @ResponseBody
    public ModelAndView DeleteTemplet(@PathVariable("id") String id)
    {
    	try{
    		ts.deleteTemplateDataByID(id);
    	}
    	catch(Exception ex)
    	{
    		//model.addAttribute("OperateStatus", "全部模板显示失败！");
    	}
    	return CheckAllTemplates();
    }
    
    
    //加载采集记录信息
    @RequestMapping(value="/collectingRecord",method=RequestMethod.GET)
    public ModelAndView ShowDataCollectingRecord()
    {
    	//model.addAttribute("OperateStatus", "");
    	List<Templateuser> tus=new ArrayList<Templateuser>();
    	tus.clear();
    	try{
    		tus=ts.checkTotalCreditTemplateUser();
    		//model.addAttribute("OperateStatus", "全部模板显示成功！");
    	}
    	catch(Exception ex)
    	{
    		//model.addAttribute("OperateStatus", "全部模板显示失败！");
    	}
    	return new  ModelAndView("client-credit-analyse-system/data-collect/collectingRecord","Templateusers",tus);
    }
    
    //根据采集记录Id查看信息详细
    @RequestMapping(value="/checkCollecting/{id}",method=RequestMethod.GET)
    @ResponseBody
    public ModelAndView CheckCollecting(@PathVariable("id") String id,Model model)
    {
    	System.out.println("tid:"+id);
    	Creditanalysistemplatecontext catc=new Creditanalysistemplatecontext();
    	try{
            catc=ts.checkUseDetailCreditTemplate(id);
    	}
    	catch(Exception ex)
    	{
    		//model.addAttribute("OperateStatus", "全部模板显示失败！");
    	}
    	System.out.println("Age:"+catc.getMaxAge());
		model.addAttribute("catc", catc);    
    	return new ModelAndView("client-credit-analyse-system/data-collect/generateDataDetail");
    }
    
    //根据采集记录id删除信息
    @RequestMapping(value="/deleteCollecting/{aid}/{tid}",method=RequestMethod.GET)
    @ResponseBody
    public ModelAndView DeleteCollecting(@PathVariable("aid") String aid,@PathVariable("tid") String tid)
    {
    	try{
    		ts.deleteTemplateUser(tid, aid);
    	}
    	catch(Exception ex)
    	{
    		//model.addAttribute("OperateStatus", "全部模板显示失败！");
    	}
    	return ShowDataCollectingRecord();
    }
    
    @RequestMapping("/generateDataAgain")
    public ModelAndView GenerateDataAgain(Creditanalysistemplatecontext catc,Model model)
    {
    	System.out.println("age="+catc.getMaxAge());
    	generateData( model,catc) ;
    	return ShowDataCollectingRecord();
    }
    
    
}